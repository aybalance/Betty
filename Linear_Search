# include <iostream>
using namespace std;

int Find_element_dv();
int insert_any_dv();
int insert_sorted_dv();
int Delete_element_dv();

int Find_element(int arr [], int n, int key)
{
	for (int i=0; i<n; i++)
	{
		if (arr[i]==key)
			return i;
	}
	return 1;
}
//Inserts a key to the end of a array with a capacity c
int insert_sorted(int arr[],int n,int key,int capacity)
{
		if (n>=capacity)
		{
			cout<<"Overlimit reached";
			return n;
		}
	
		arr[n]=key;
		return n+1;
}
void insert_any_pos(int arr[],  int n, int x, int pos)
{
	for(int i=pos; i<n;i++)
	{
		arr[i+1]=arr[i];
	}
	arr[pos]=x;
}
int delete_element(int arr[], int n, int key)
{
	int pos =Find_element(arr, n, key);
	
	if (pos==1){
		cout<<"element not found";
		return n;
	}
	for(int i=pos; i<n-1; i++){
		arr[i]=arr[i+1];}
	return n-1;
}
	
	
	
		
int main(int argc, char *argv[])
{
	cout <<"Hello world, \n"<<"This is you result";
	
	Delete_element_dv();
	return 0 ;
}

int Find_element_dv()
{
	int arr[] ={1,2,3,4};
	int n=sizeof(arr)/sizeof(arr[0]);
	int key=4;
	int result=Find_element(arr,n,key);
	if (result==1)
		cout<<"No result found";
	else
		cout<<"The element is found at position " <<result+1;
}
int insert_sorted_dv()
{
	int arr[3]={2,4};
	int n=2;
	int key=10;
	int capacity = sizeof(arr)/sizeof(arr[0]);
	n=insert_sorted(arr,n,key,capacity);
	cout<<" The updated array is";
	for(int i=0;i<n;i++)
		cout <<" "<<arr[i]<<" ";
	return 0;
}

int insert_any_dv()
{
	int arr[]={1,2,3,4,5,6,7};
	int pos=3;
	int x=50;
	int n=8;
	
	insert_any_pos(arr,n,x,pos);
	for (int i=0; i<n; i++)
		cout<<arr[i]<<" ";
	return 0;
}
int Delete_element_dv()
{
	int arr[]={2,4,6,8,10};
	int n = sizeof(arr)/sizeof(arr[0]);
	int key =20;
	
	n=delete_element(arr,n,key);
	for (int i=0; i <n; i++)
	{
		cout <<arr[i]<<" ";
	}
return 0;
}
